#include<iostream>
#include<random>
#include<vector>
#include<array>
#include<algorithm>

using namespace std; 

struct Pattern // size needs to be set to difficulty 
{
    vector<int> nums;

};

struct Stat_Pattern  // size needs to be set to difficulty  
{
    vector<char> correct_positions; // 'o' = correct guess, 'x' = wrong position and number,  '-' = correct number but wrong position
    //float guess_percentage; // percentage of (right guessed position / (total correct positions)*(right guessed numbers/ total correct numbers)
};


class Game 
{
    private: 
        Pattern correct_pattern; // can't be changed once generated. determined by difficulty. 
        array<Pattern,10> guesses; // container for guesses. 
        array<Stat_Pattern, 10> stats; // holds stats for guesses. 
        int difficulty; // user input variable. range of (1-10)
        int turn_counter; // range of (1-10). intial condition of 1. 
     

    public: 
        Game(); 
        void GetGameStatistics();
        bool CheckGuess(Pattern current_guess);
        void ResetGuess();
        Pattern GetGuess(int index);
        void AddGuess(Pattern current_guess);
        void ResetPattern();
        Pattern GetPattern();
        void SetDifficulty(int new_difficulty);
        int GetDifficulty();
        void ResetTurn();
        int GetTurn(); 
        void IncrementTurn();
        void CalculateStats(Pattern current_guess);
        Stat_Pattern GetStat(int index);
        void ResetStat();



    
};


//Create Mastermind with new rules
    // New Rules include: guess a pattern of numbers
    // user is always the guesser 
    // Difficulty settings : higher difficulty means more numbers to guess  and higher range of numbers
    // player has 10 guesses 

//UI 
    //* asks user for difficulty for input 
    // enter a difficulty between 1-10 
    // The pattern is random generated. The length and range of the pattern is determined by the difficulty. example difficulty 4 has a range of 1-4 with a pattern length of 1-4
        //* Create a function that inputs the difficulty and outputs a pattern
            //**  initalizes a list with a size equal to difficulty given. 
                //*** vector or dynamic array  (need to consider pros and cons of each implementation.)
            //**  iterate thru list and fill with the rand function with a range equal to the difficulty given.
                //*** range based for loop that iterates thru the list 

                //*** calls the rand function and caps its range at the number given.  
                //*** fills each index with a number generated by the rand function.                                                                                 
            //**  returns the list. 
    // User plays level // During each of the 10 turns. Print the current turn and ask the user to guess the pattern. Calculate how many of the guesses are correct and how many are right but in the wrong position.  
        //** User enters a guess 
        //** Program checks to see if guess is correct. 
            //* game needs a Function to See if user won game
        //** Displays results from check 
            //** if user won. congratulates user and loops by to main menu 
            //** if user has not guessed correctly and counter has not reached 10  then it displays statistics
                //* game needs a container turn counter
                    //**** private member variable that is enclosed in a larger game object. 
                                //***** has two public functions that get and set it. 
                                    //****** public get function for turn count
                                        //******* returns the integer turn count
                                    //****** public set function for turn count
                                        //******* set function can only increase itself by one
                //* game needs a Function to Display Statistics
                    //*** display function that encapsulates hints function 
                        //* game needs a container for hints based of user guess
                            //**** private member variable for correct pattern. 1D vector  
                                //***** public get function for correct pattern vector
                                //***** public set function for reseting correct  pattern vector. 
                                    //****** public reset function needs to also reset all member variables. (setter inside)
                                        //******* the game object needs an inital state that can called throughtout the program.  
                            //**** private member variable for guesses. 2D vector [turn][guess]
                                //****** public getter function for guess vector 
                                //****** public setter function that can only add a guess to guess vector
                                //****** can be reset by the public reset function.  
                        //* game needs a Function which guess are perfectly correct or semi correct (either right position or right number
                        //*** game needs a container to hold wrong guesses

            //** if user has not guessed correctly and the turn counter has reached 10 then it displays lost message and loops back to main menu.
                //*** program is nested inside a do while loop that terminates on a bool terminate condition.
                    //**** one of the options at the main menu is for the user to quit the game. this changes the terminate variable to true. 
                        //***** inital setting for  bool terminate = false 
                        //***** input statement that asks the user to terminate.
                        //***** terminate is changed to true and a break statement
                        //***** do while loop is exited and program terminates. 
                //*** if the user chooses to play a new game then the default construct for the game object is called that initalized all variable to their default values. 
                    //**** at the beginning of the do-while loop, default constructor called
                        //***** default constructor (DC) sets turn counter member variable to 0
                        //***** DC sets pattern vector to empty
                        //***** DC sets guess vector to empty 
                //*** user gameplay is nested inside a for loop that terminates when turn counter reaches 
                    //**** for loop (int turn = 0; turn < turn counter; turn++)
                    //**** turn counter++ (at the end of the for loop)
                    
            
            
        // Print the statistics to the screen. 
        //if the user has succeeded then indicate that the user has succeeded. if the pattern is not guessed within the 10 turns indicate that the player has lost. 


    // user chooses new setting or terminates game
